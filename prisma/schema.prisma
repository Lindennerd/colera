generator client {
    provider = "prisma-client-js"
}

generator markdown {
    provider = "prisma-markdown"
    output   = "./docs/prisma.md"
    title    = "Colera ERP"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Company       Company[]
    CompanyUsers  CompanyUsers[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id        Int      @id @default(autoincrement())
    name      String
    logo      String
    email     String
    phone     String
    address   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner        User           @relation(fields: [ownerId], references: [id])
    ownerId      String
    License      License[]
    CompanyUsers CompanyUsers[]
    ClientTypes  ClientType[]
    Client       Client[]

    @@index([name])
}

model License {
    id        Int     @id @default(autoincrement())
    company   Company @relation(fields: [companyId], references: [id])
    companyId Int
    active    Boolean @default(true)
    maxUsers  Int
}

model CompanyUsers {
    id        Int             @id @default(autoincrement())
    company   Company         @relation(fields: [companyId], references: [id])
    companyId Int
    user      User            @relation(fields: [userId], references: [id])
    userId    String
    role      CompanyUserRole @default(USER)
}

enum CompanyUserRole {
    OWNER
    ADMIN
    USER
}

model ClientType {
    id        Int                @id @default(autoincrement())
    name      String
    fields    FieldsDefinition[]
    companyId Int
    company   Company            @relation(fields: [companyId], references: [id])
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
    Client    Client[]

    @@index([name])
}

model FieldsDefinition {
    id           Int         @id @default(autoincrement())
    name         String
    type         FieldType
    order        Int
    required     Boolean
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    ClientType   ClientType? @relation(fields: [clientTypeId], references: [id])
    clientTypeId Int?
}

enum FieldType {
    STRING
    NUMBER
    DATE
    BOOLEAN
    ARRAY
}

model Client {
    id           Int        @id @default(autoincrement())
    name         String
    fields       Json
    clientType   ClientType @relation(fields: [clientTypeId], references: [id])
    clientTypeId Int
    companyId    Int
    company      Company    @relation(fields: [companyId], references: [id])
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@index([name])
}
